{
  "id": "grasshopper_optimization_algorithm_with_principal_component_analysis_for_global_",
  "title": "Grasshopper optimization algorithm with principal component analysis for global optimization",
  "authors": [
    "XiaofengYue",
    "HongboZhang"
  ],
  "content": "Optimization is used to select the best options among all the solutions, and it exists in many fields such as scheduling problem, parameter estimation, materials prediction and structure design [1][2][3][4][5]. However, it is difficult to solve the high dimension optimization problems with the traditional optimization algorithms, and this issue has drawn much attention of researchers [6]. It is reported that the heuristic and meta-heuristic algorithms show superiority on complex optimization tasks. The majority of these algorithms are proposed based on natural phenomena. Some of the typical algorithms are genetic algorithm (GA) which is inspired from genetic mechanism [7], and particle swarm optimization (PSO) is proposed based on the behavior of birds [8]. Some recent optimization algorithms employ the ant colony optimization (ACO) [9], artificial bee colony algorithm (ABC) [10], firefly algorithm (FA) [11], cuckoo search (CS) [12], gravitational search algorithm (GSA) [13], bat algorithm (BA) [14], gray wolf optimization (GWO) [15] and moth-flame optimization algorithm (MFO) [16]. In addition, modifying the existing algorithms is an important work, and it helps using the hardware better. This point is also meaningful to supercomputing [17]. Graphics processor units (GPUs) have been widely used for large number computation due to its high performance [18]. If the optimization algorithm runs on GPU, the execution time will be shorter [19]. The grasshopper optimization algorithm (GOA) is newly proposed to solve optimization problems. The advantages of the GOA have been proven by comparing with some well-known and latest algorithms [20]. Therefore, practitioners and researchers are interested with employing the GOA to solve the various optimization problems. Aljarah et al. [21] used the GOA to solve the feature selection and support vector machine problem. Zhang et al. [22] applied GOA to analyze vibration signals. Wu and Wang [23] had applied adaptive GOA to trajectory optimization problem. Hekimoğlu and Ekinci [24] applied GOA to automatic voltage regulator system. Łukasik et al. [25] used GOA to solve data clustering problem. Lal et al. [26] applied GOA to optimize fuzzy PID controller. Fathy [27] used GOA to solve reconfiguration of PV array problem. The basic GOA is a promising algorithm and has been successfully applied to many fields. However, the basic GOA has some shortcomings, such as limited exploitation capability and premature [28]. Therefore, many researchers are interested in improving the GOA. Ewees et al. [29] proposed a novel improved GOA which combined opposition-based learning (OBL) strategy. The outstanding performance of the proposed GOA was proved by benchmark functions and engineering problems. Saxena et al. [30] used chaotic strategy with 10 maps to enhance bridging mechanism of GOA. The results proved the efficiency of the improved GOA. In multilevel thresholding image segmentation, Liang et al. [31] presented a modified GOA, which combined the Levy flight algorithm. To overcome the drawbacks of the basic GOA algorithm, Luo et al. [32] proposed an improved GOA and applied to financial stress predicting problem. Three strategies named Gaussian mutation, Levy flight and opposition-based learning were integrated into GOA. The experiment results indicated that the modifications can significantly improve the basic GOA. As we can see above, many versions of GOA have been proposed. However, the enhanced GOA algorithms are far from perfect. To further improve the GOA, an enhanced grasshopper optimization algorithm, namely PCA-GOA, is proposed. The main contributions of the paper are as follows: (a) In the PCA-GOA, the principal component analysis is incorporated to generate the new population with high quality. Then, the generated population is used to replace the population with bad fitness values. This operation is able to improve the exploitation capability of the GOA. Grasshopper optimization algorithm with principal component… (b) The novel inertia weight is introduced to control the search process in an intelligent way. Under this strategy, the grasshoppers with better fitness values move quickly to the target grasshopper and the grasshoppers with worse fitness values maintain strong exploration capabilities. Therefore, novel inertia weight plays a role in both enhancing the exploration and exploitation capability. The structure of the rest of this paper is as follows. Section 2 presents the basic GOA algorithm. Section 3 shows the proposed PCA-GOA algorithm. Section 4 provides discussions and analyses of the experiment results. Section 5 concludes the paper. The basic grasshopper optimization algorithm (GOA) was originated by Saremi and Mirjalili [20], which mimics the behavior of grasshopper. The mathematical model of the GOA can be expressed as follows: where X i is the position of the i-th grasshopper, S i represents the social interaction, G i denotes the gravity force of the i-th grasshopper, A i refers the wind advection. where x i and x j are the positions of i-th and j-th , respectively. d ij denotes the dis- tance of i-th and j-th grasshoppers. The s function represents social force is given as follows: where f is the intensity of attraction, l denotes the attractive length scale. where g denotes the gravitational constant, êg is unity vector. where u denotes a constant drift, êw represents a unity vector. The mathematical model can be written as: (1) (5) where N defines the number of grasshoppers. In order to solve the optimization problem in a better way, a modified GOA is expressed as follows: where ub d and lb d are the upper bound and lower bound, Td is a target grasshopper. c is the parameter, which used to balance exploration and exploitation. c can be given by: where c max and c min are the maximum value and the minimum value, l is the number of current iterations, L denotes the maximum number of iterations. In basic GOA, the grasshoppers fly around the target grasshopper, which leads redundancy that reduces the diversity of population. More importantly, the grasshoppers with bad fitness have the low possibility to reach the optimal solution. In this work, principal component analysis is introduced to solve this problem. Principal component analysis is an important statistical analysis method, which has two main functions that are data reduction and interpretation [33,34]. The minimally correlated variables can be transformed from correlated variables by principal component analysis [35]. In the PCA-GOA algorithm, the new generated solutions are minimally correlated and show the information of original solutions. Furthermore, the new solutions may have better quality than the original solutions, which enhance the exploitation capability of the GOA. Let that U = U 1 , U 2 … , U p � is an exemplar of the original data set, and it can be expressed as follows: Grasshopper optimization algorithm with principal component… where p represents the number of exemplars. The linear transformations can be cal- culated as follows: where a i represents the coefficient vector. The linear transformation model can be represented in a simple way as follows: It is important to choose the number m of principal components. The m is defined as follows: where is contribution rate. In this work, we use = 0.85. 1 , 2 , m denote eigenval- ues of covariance matrix. Suppose the covariance matrix of grasshoppers X = x t 1 , x t 2 , … x t n is V , prin- cipal population can be generated as follows: where ) denote feature vectors of V . According to the principal com- ponent analysis theory, the new generated population is uncorrelated. The individuals of bad fitness are substituted by principal population. Figure 1 shows the flow of principal component analysis operation. ( In basic GOA algorithm, the parameter c plays an important role in balancing explo- ration and exploitation, which decreased with the number of iterations in a linear way. However, all the grasshoppers take the same parameter c without considering the fitness of each grasshopper. In this paper, we propose a novel inertia weight, which takes different strategies based on the fitness values of grasshoppers. To guarantee the steady of searching process, one of c is replaced. The novel inertia weight is calculated as follows: The modified mathematical model can be expressed by: The flowchart of the proposed PCA-GOA is shown in Fig. 2. ( Grasshopper optimization algorithm with principal component… In this section, unimodal benchmark functions, multimodal benchmark functions and fixed-dimension multimodal benchmark functions are used to test the performance of the PCA-GOA [36][37][38][39]. The benchmark functions are provided in Tables 1, 2 and 3. The exploitation of an algorithm can be tested by unimodal benchmark functions f 1f 7 as only one global is contained. Multimodal bench- mark functions f 8f 13 and fixed-dimension multimodal benchmark functions f 14f 23 are efficient tool for evaluating exploration capability and local optima Return best grasshopper and its fitness Update inertia weight using Eq.( 16) For each grasshopper Normalize the distances between grasshoppers Update the positions based on Eq. 17 Cope with the grasshoppers outsides the boundaries End for Sort the grasshoppers based on fitness Fig. 2 Flowchart of the proposed PCA-GOA algorithm avoidance. However, fixed-dimension multimodal benchmark functions are different from multimodal benchmark functions in dimensionality. Parameters setting can influence the performance of the PCA-GOA when solving the various optimization problems. In this study, the five parameters of PCA-GOA include maximum parameter c max , minimum parameter c min , number of search agents N , maximum number of iterations L , contribution rate are analyzed on benchmark function f 1 . An orthogonal test is worked as a tool to show the relations between the performance and each parameter setting. Ranges of PCA-GOA parameters are described in Table 4. According to the number of factors and levels, we select the L 27 3 13 type to complete the task. To make the results more convincing, the average values after 30 runs are used to make comparisons. As shown in Table 5, the maximum number of iterations L is the most important factor that affects the search capability of the PCA-GOA. Furthermore, the importance of the other factors is as follows: c max > c min > N > 𝛿 . Figure 3 shows the rela- tion between average fitness values and the five parameters. From Table 5, we can obtain the best combination is c max = 1 , c min = 0.00001 , N = 50 , L = 300 , = 0.85. Six typical and recent algorithms including particle swarm optimization (PSO) [8], bat algorithm (BA) [14], ant lion optimizer (ALO) [40], dragonfly algorithm (DA) [41], grasshopper optimization algorithm (GOA) [20] and chaotic grasshopper optimization algorithm (CGOA) [28] are employed to compare the performance of the PCA-GOA. The key parameters of the seven algorithms are shown [-100, 100] 0 Grasshopper optimization algorithm with principal component… Multimodal benchmark functions Function Dim Range [-5.12, 5.12] 0 �   Grasshopper optimization algorithm with principal component… affect is significant. Furthermore, CPU time and allocated memory are used to evaluated the computation amount of the PCA-GOA. The details of experiments environment are as follows: Core (TM) i5-4590 CPU @ 3.30 GHz with 8 GB RAM and 64 bit under Windows 7 system using Matlab R2015a. Tables 7, 8 and 9 illustrate the results of unimodal benchmark functions, multimodal benchmark functions and fixed-dimension multimodal benchmark functions, respectively. In addition, the best results are highlighted in bold.     7, the PCA-GOA provides the best results on the four indexes for f 1 , f 2 , f 3 , f 4 , f 5 , f 6 , and f 7 , which shows the PCA-GOA has remarkable advantages in terms of unimodal test functions. The superiority of the PCA-GOA can be further proved by Table 10, because all p values are much less than 0.05. Therefore, we can conclude that the PCA-GOA has a high exploitation capability. Observed from Table 8, it is apparent that PCA-GOA obtains better results for the majority functions except f 8 and f 9 . For f 8 , the PCA-GOA provides the best standard deviation values. It can be seen from Table 11, the PCA-GOA is markedly better than the other algorithm for f 10 , f 11 , f 12 and f 13 . It suggests that the princi- pal component analysis plays an important role in improving the search precision, and novel inertia weight is an efficient tool for keeping the exploration capability. In a word, the PCA-GOA has a perfect exploration ability and superior capability in jumping out of local optima. The PCA-GOA fails to achieve the best performance on some functions, and the reasons are as follows: the principal component analysis helps the algorithm finds the better solutions with a fast rate; however, this leads the grasshoppers gather around the best solution and the novel inertia weight mechanism is insufficient to jump out of the local best solution with a certain probability. Table 9 shows the results from the seven algorithms for the fixed-dimension multimodal benchmark functions. As we can see the results from  Grasshopper optimization algorithm with principal component… the advantage is not obvious. Therefore, it can be claimed that the PCA-GOA shows better performance than other algorithms on fixed-dimension multimodal benchmark functions. Tables 13, 14 and 15 display the CPU time of the PSO, BA, ALO, DA, GOA, CGOA and PCA-GOA. From Tables 13 and14, the DA requires the more computation time than the other algorithms on unimodal benchmark functions and multimodal benchmark functions. Table 15 shows that the PCA-GOA demands the highest computation time among the seven algorithms on the fixed-dimension multimodal benchmark functions. However, the CPU time of PCA-GOA is slightly longer than the GOA and CGOA. It indicates that time complexity of the principal component analysis mechanism is acceptable. Tables 16,17 and 18 present the allocated memory of the seven algorithms. These tables show that PCA-GOA demands more allocated memory than the other algorithms. However, the allocated memory of PCA-GOA is almost in the same in the level with the GOA and CGOA. To continue evaluating the search capability and robustness of the proposed PCA-GOA, different number of iterations and population size are used to make further comparisons. The results are shown in Tables 19, 20 and 21. From the tables, with the increasing of number of iterations and population size, all the algorithms provide better results. Table 19 lists the results of the seven algorithms for unimodal test functions. Compared with other algorithms, the PCA-GOA always achieve better results on all unimodal test functions; meanwhile the superiority of the PCA-GOA is Grasshopper optimization algorithm with principal component… demonstrated by Table 22. The results show that the PCA-GOA is efficient enough to deal with the unimodal test functions It can be seen from Tables 20 and23 the PCA-GOA performs significantly better than the other algorithms on f 10, f 11, f 12 and f 13 . Table 21 exhibits statistical results for the fixed-dimension multimodal benchmark functions. From the perspective of average fitness values, the PCA-GOA is the first rank on f 14 , f 16 , f 17 , f 18 and f 20 . In addi- tion, Table 24 shows that p values of f 14 , f 16 f 17 and f 18 are much below 0.05, which verify the performance of the PCA-GOA is much better than the other algorithms. Mainly, the PCA-GOA performs better than the PSO, BA, ALO, DA, GOA and CGOA on two types multimodal benchmark functions. Tables 25,26, 27, 28, 29 and 30, the CPU time and the allocated memory are increased due to the changing of iterate numbers and population size. The conclusions are consistent with the above. In this paper, the GOA is modified by incorporating it with principal component analysis and novel inertia weight. The proposed PCA-GOA is assessed on 23 benchmark functions with different number of iterations and population sizes. The experiments results show that the proposed PCA-GOA is much better than PSO, BA, ALO, DA, basic GOA and CGOA in most test cases. In the PCA-GOA, combing with the two strategies leads the CPU time and allocated memory rise. However, the increasing computation amount is limited. For some cases, the PCA-GOA falls into local best solutions, and this is the biggest issue requires to be resolved in the future. Furthermore, the PCA-GOA is planned to solve some engineering problems. Worst -2.42173 -1.54064 -2.42173 -1.67649 -1.67655 -1.85948 -1.85948 Mean -4.82206 -4.03275 -5.64316 -5.71188 -4.31280 -4.41213 -5.90321",
  "filePath": "C:\\Users\\Alex Isaev\\Documents\\truth source\\citation-verifier\\src\\document-database\\documents\\grasshopper_optimization_algorithm_with_principal_component_analysis_for_global_.json",
  "sourcePdf": "C:\\Users\\Alex Isaev\\Documents\\truth source\\citation-verifier\\src\\document-database\\pdf-documents\\32.pdf",
  "doi": "10.1007/s11227-019-03098-9",
  "year": "2019",
  "journal": ""
}